import datetime
import os
import re
from typing import Any

from openai import OpenAI
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice,
    Update,
)
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    PreCheckoutQueryHandler,
    filters,
)


TOKEN = os.getenv("TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
MODEL_NAME = os.getenv("MODEL_NAME", "gpt-4o-mini")

FREE_DAILY = int(os.getenv("FREE_DAILY", "30"))
UNLIMIT_PRICE_STARS = int(os.getenv("UNLIMIT_PRICE_STARS", "400"))
PRO_PRODUCT_TITLE = os.getenv(
    "PRO_PRODUCT_TITLE", "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã GPT (–Ω–∞ 30 –¥–Ω–µ–π)"
)
PRO_PRODUCT_DESC = os.getenv(
    "PRO_PRODUCT_DESC", "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã GPT –≤ —ç—Ç–æ–º –±–æ—Ç–µ. –î–µ–π—Å—Ç–≤—É–µ—Ç 30 –¥–Ω–µ–π."
)
CURRENCY = os.getenv("CURRENCY", "XTR")
SUPPORT_USERNAME = os.getenv("SUPPORT_USERNAME", "poderzkabotainzenernayamysl")
CHANNEL_LINK = os.getenv("CHANNEL_LINK", "https://t.me/hizackuaeu")

oai = OpenAI(api_key=OPENAI_API_KEY)

user_state: dict[str, int] = {}
conversation_history: dict[int, list[dict[str, str]]] = {}

MAX_HISTORY_MESSAGES = int(os.getenv("MAX_HISTORY_MESSAGES", "8"))
if MAX_HISTORY_MESSAGES < 2:
    MAX_HISTORY_MESSAGES = 2
elif MAX_HISTORY_MESSAGES % 2:
    MAX_HISTORY_MESSAGES -= 1

redis = None
try:
    import redis as _redis

    if os.getenv("REDIS_URL"):
        redis = _redis.from_url(os.getenv("REDIS_URL"))
except Exception:
    redis = None


def main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üéì –ö—É–ø–∏—Ç—å –∫—É—Ä—Å", callback_data="BUY")],
            [InlineKeyboardButton("üì£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
            [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{SUPPORT_USERNAME}")],
            [InlineKeyboardButton("‚≠ê –ë–µ–∑–ª–∏–º–∏—Ç GPT", callback_data="BUY_PRO")],
        ]
    )


async def inc_and_get_count(user_id: int) -> int:
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""

    key = f"qcount:{user_id}:{datetime.date.today().isoformat()}"
    if redis:
        return int(redis.incr(key, 1))

    user_state.setdefault(key, 0)
    user_state[key] += 1
    return user_state[key]


async def get_count(user_id: int) -> int:
    key = f"qcount:{user_id}:{datetime.date.today().isoformat()}"
    if redis:
        value = redis.get(key)
        return int(value) if value else 0

    return user_state.get(key, 0)


def has_pro(user_id: int) -> bool:
    key = f"pro:{user_id}"
    if redis:
        return redis.ttl(key) > 0
    return False


def grant_pro(user_id: int, days: int = 30) -> None:
    key = f"pro:{user_id}"
    if redis:
        redis.setex(key, days * 86400, "1")


def wants_image(text: str) -> bool:
    triggers = [
        "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π",
        "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å",
        "–Ω–∞—Ä–∏—Å—É–π",
        "—Å–¥–µ–ª–∞–π",
        "—Å–¥–µ–ª–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É",
        "–∫–∞—Ä—Ç–∏–Ω–∫—É",
        "–∫–∞—Ä—Ç–∏–Ω–∫–∞",
        "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        "—Ñ–æ—Ç–æ",
        "–∑–≥–µ–Ω–µ—Ä—É–π",
    ]
    lowered = text.lower()
    return any(trigger in lowered for trigger in triggers)


def extract_image_prompt(text: str) -> str:
    return (
        re.sub(
            r"^(?:/image|—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π|—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å|–Ω–∞—Ä–∏—Å—É–π|—Å–¥–µ–ª–∞–π(?:\s+–∫–∞—Ä—Ç–∏–Ω–∫—É)?|)\s*",
            "",
            text.strip(),
            flags=re.IGNORECASE,
        ).strip()
        or text.strip()
    )


def build_system_prompt(user_lang: str | None) -> str:
    base_prompt = (
        "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ Telegram-–±–æ—Ç–∞. "
        "–û–ø—Ä–µ–¥–µ–ª–∏ —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, "
        "–ø–æ–¥–±–∏—Ä–∞—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ —Å—Ç–∏–ª—å. –ï—Å–ª–∏ —è–∑—ã–∫ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—è, "
        "–∏—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π. –û—Ç–≤–µ—á–∞–π —è—Å–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."
    )

    if user_lang:
        base_prompt += (
            " –£—á—Ç–∏, —á—Ç–æ Telegram —Å–æ–æ–±—â–∏–ª –∫–æ–¥ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
            f"'{user_lang}'. –ï—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —è–∑—ã–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, "
            "–æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )

    return base_prompt


def get_history(user_id: int) -> list[dict[str, str]]:
    return conversation_history.get(user_id, [])


def remember_interaction(user_id: int, user_text: str, assistant_text: str) -> None:
    history = conversation_history.setdefault(user_id, [])
    history.append({"role": "user", "content": user_text})
    history.append({"role": "assistant", "content": assistant_text})
    if len(history) > MAX_HISTORY_MESSAGES:
        del history[:-MAX_HISTORY_MESSAGES]


def build_messages(user_id: int, text: str, user_lang: str | None) -> list[dict[str, Any]]:
    messages: list[dict[str, Any]] = [
        {"role": "system", "content": build_system_prompt(user_lang)}
    ]
    messages.extend(get_history(user_id))
    messages.append({"role": "user", "content": text})
    return messages


async def ask_gpt(user_id: int, text: str, user_lang: str | None) -> str:
    response = oai.chat.completions.create(
        model=MODEL_NAME,
        messages=build_messages(user_id, text, user_lang),
    )
    return (response.choices[0].message.content or "").strip()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "‚úÖ –ü—Ä–∏–≤–µ—Ç! –Ø –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å GPT.\n"
        f"–ë–µ—Å–ø–ª–∞—Ç–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {FREE_DAILY} –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞ ‚Äî ¬´‚≠ê –ë–µ–∑–ª–∏–º–∏—Ç GPT¬ª.",
        reply_markup=main_menu_kb(),
    )


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "/start ‚Äî –º–µ–Ω—é\n"
        "/ask <–≤–æ–ø—Ä–æ—Å> ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å GPT\n"
        "/limit ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫\n"
        "/buy ‚Äî –∫—É–ø–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç",
        reply_markup=main_menu_kb(),
    )


async def show_limit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    used = await get_count(update.effective_user.id)
    left: Any = "‚àû" if has_pro(update.effective_user.id) else max(0, FREE_DAILY - used)
    await update.message.reply_text(f"–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {left}")


async def paywall(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.\n"
        "–ö—É–ø–∏ ‚≠ê –ë–µ–∑–ª–∏–º–∏—Ç GPT –Ω–∞ 30 –¥–Ω–µ–π –∏ –∑–∞–¥–∞–≤–∞–π —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ."
    )
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("–ö—É–ø–∏—Ç—å –∑–∞ ‚≠ê", callback_data="BUY_PRO")]]
    )
    await update.message.reply_text(text, reply_markup=kb)


async def ask_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    question = " ".join(context.args).strip() if context.args else None
    if not question:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–∞–∫: /ask —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å")
        return

    if not has_pro(user_id):
        used = await get_count(user_id)
        if used >= FREE_DAILY:
            await paywall(update, context)
            return
        await inc_and_get_count(user_id)

    await update.message.chat.send_action("typing")
    try:
        answer = await ask_gpt(
            user_id, question, update.effective_user.language_code
        )
    except Exception as exc:  # pragma: no cover - API/network errors
        answer = f"–û—à–∏–±–∫–∞ OpenAI: {exc}"

    cleaned_answer = answer or "–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç :("
    await update.message.reply_text(cleaned_answer)
    if answer:
        remember_interaction(user_id, question, cleaned_answer)


async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message:
        return

    text = (update.message.text or "").strip()
    if not text or text.startswith("/"):
        return

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç–∏–Ω–æ–∫. –ü–æ–∫–∞ –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–º.
    await update.message.chat.send_action("typing")
    try:
        answer = await ask_gpt(
            update.effective_user.id, text, update.effective_user.language_code
        )
    except Exception as exc:  # pragma: no cover - API/network errors
        answer = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT: {exc}"

    cleaned_answer = answer or "‚ö†Ô∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏."
    await update.message.reply_text(cleaned_answer)
    if answer:
        remember_interaction(update.effective_user.id, text, cleaned_answer)


async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == "BUY":
        await query.edit_message_text(
            "–ö–∞—Ç–∞–ª–æ–≥ –∫—É—Ä—Å–æ–≤ –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="BACK_HOME")]]
            ),
        )
    elif query.data == "BUY_PRO":
        prices = [LabeledPrice(label=PRO_PRODUCT_TITLE, amount=UNLIMIT_PRICE_STARS)]
        await query.message.reply_invoice(
            title=PRO_PRODUCT_TITLE,
            description=PRO_PRODUCT_DESC,
            payload="pro_30days",
            provider_token="",
            currency=CURRENCY,
            prices=prices,
        )
    elif query.data == "BACK_HOME":
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())


async def pre_checkout_q(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.pre_checkout_query.answer(ok=True)


async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    grant_pro(user_id, days=30)
    await update.message.reply_text(
        "üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ë–µ–∑–ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π. –ü–∏—à–∏ /ask –≤–æ–ø—Ä–æ—Å."
    )


def main() -> None:
    if not TOKEN or not OPENAI_API_KEY:
        raise SystemExit("–ù—É–∂–Ω—ã TOKEN –∏ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("ask", ask_cmd))
    app.add_handler(CommandHandler("limit", show_limit))
    app.add_handler(CommandHandler("buy", lambda u, c: paywall(u, c)))

    text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, on_text)
    app.add_handler(text_handler)

    app.add_handler(CallbackQueryHandler(on_cb))
    app.add_handler(PreCheckoutQueryHandler(pre_checkout_q))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))

    print("üöÄ Bot started (polling)‚Ä¶")
    app.run_polling(close_loop=False)


if __name__ == "__main__":
    main()
