import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
TOKEN = os.getenv("TOKEN")  
SUPPORT_USERNAME = os.getenv("SUPPORT_USERNAME", "#Poderzkabotainzenernayamysl")  
CHANNEL_LINK = os.getenv("CHANNEL_LINK", "https://t.me/hizackuaeu")
def main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üéì –ö—É–ø–∏—Ç—å –∫—É—Ä—Å", callback_data="BUY")],
        [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{SUPPORT_USERNAME}")],
        [InlineKeyboardButton("üì£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –Ω–∞ —Å–≤—è–∑–∏. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb())

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã: /start, /help", reply_markup=main_menu_kb())

async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "BUY":
        await q.edit_message_text(
            "–¢—É—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ (–ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –æ–ø–ª–∞—Ç—É).",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="BACK_HOME")]])
        )
    elif q.data == "BACK_HOME":
        await q.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

def main():
    if not TOKEN:
        raise SystemExit("–ù–µ –Ω–∞–π–¥–µ–Ω TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CallbackQueryHandler(on_cb))
    print("üöÄ Bot started (polling)‚Ä¶")
    app.run_polling(close_loop=False)

    main()
import os, asyncio, datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from openai import OpenAI


TOKEN = os.getenv("TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
FREE_DAILY = int(os.getenv("FREE_DAILY", "10"))   
UNLIMIT_PRICE_STARS = int(os.getenv("UNLIMIT_PRICE_STARS", "400"))  
PRO_PRODUCT_TITLE = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã GPT (–Ω–∞ 30 –¥–Ω–µ–π)"
PRO_PRODUCT_DESC  = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã GPT –≤ —ç—Ç–æ–º –±–æ—Ç–µ. –î–µ–π—Å—Ç–≤—É–µ—Ç 30 –¥–Ω–µ–π."
CURRENCY = "XTR"  
oai = OpenAI(api_key=OPENAI_API_KEY)
user_state = {}  

redis = None
try:
    import redis as _redis
    if os.getenv("REDIS_URL"):
        redis = _redis.from_url(os.getenv("REDIS_URL"))
except Exception:
    redis = None

async def inc_and_get_count(user_id: int) -> int:
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."""
    key = f"qcount:{user_id}:{datetime.date.today().isoformat()}"
    if redis:
        return int(redis.incr(key, 1))
    
    user_state.setdefault(key, 0)
    user_state[key] += 1
    return user_state[key]

async def get_count(user_id: int) -> int:
    key = f"qcount:{user_id}:{datetime.date.today().isoformat()}"
    if redis:
        val = redis.get(key)
        return int(val) if val else 0
    return int(user_state.get(key, 0))

def has_pro(user_id: int) -> bool:
    key = f"pro:{user_id}"
    if redis:
        return redis.ttl(key) > 0  
    return False  

def grant_pro(user_id: int, days: int = 30):
    key = f"pro:{user_id}"
    if redis:
        redis.setex(key, days * 86400, "1")

def main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üéì –ö—É–ø–∏—Ç—å –∫—É—Ä—Å", callback_data="BUY")],
        [InlineKeyboardButton("üß† –°–ø—Ä–æ—Å–∏—Ç—å GPT", switch_inline_query_current_chat="")],
        [InlineKeyboardButton("‚≠ê –ë–µ–∑–ª–∏–º–∏—Ç GPT", callback_data="BUY_PRO")],
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚úÖ –ü—Ä–∏–≤–µ—Ç! –Ø –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å GPT.\n"
        f"–ë–µ—Å–ø–ª–∞—Ç–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {FREE_DAILY} –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞ ‚Äî ¬´‚≠ê –ë–µ–∑–ª–∏–º–∏—Ç GPT¬ª.",
        reply_markup=main_menu_kb()
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –º–µ–Ω—é\n"
        "/ask <–≤–æ–ø—Ä–æ—Å> ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å GPT\n"
        "/limit ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫\n"
        "/buy ‚Äî –∫—É–ø–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç",
        reply_markup=main_menu_kb()
    )

async def show_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    used = await get_count(update.effective_user.id)
    left = "‚àû" if has_pro(update.effective_user.id) else max(0, FREE_DAILY - used)
    await update.message.reply_text(f"–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {left}")

async def ask_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    question = " ".join(context.args) if context.args else None
    if not question:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–∞–∫: /ask —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å")
        return

    if not has_pro(user_id):
        used = await get_count(user_id)
        if used >= FREE_DAILY:
            await paywall(update, context)
            return
        await inc_and_get_count(user_id)

    await update.message.chat.send_action("typing")
    try:
       
        resp = oai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."},
                {"role": "user", "content": question},
            ],
        )
        answer = resp.choices[0].message.content.strip()
    except Exception as e:
        answer = f"–û—à–∏–±–∫–∞ OpenAI: {e}"

    await update.message.reply_text(answer or "–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç :(")

async def paywall(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = ("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.\n"
           "–ö—É–ø–∏ ‚≠ê –ë–µ–∑–ª–∏–º–∏—Ç GPT –Ω–∞ 30 –¥–Ω–µ–π –∏ –∑–∞–¥–∞–≤–∞–π —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ.")
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ö—É–ø–∏—Ç—å –∑–∞ ‚≠ê", callback_data="BUY_PRO")]])
    await update.message.reply_text(txt, reply_markup=kb)

async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "BUY":
        await q.edit_message_text("–ö–∞—Ç–∞–ª–æ–≥ –∫—É—Ä—Å–æ–≤ –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º.", reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="BACK_HOME")]]))
    elif q.data == "BUY_PRO":
        prices = [LabeledPrice(label=PRO_PRODUCT_TITLE, amount=UNLIMIT_PRICE_STARS)]
        await q.message.reply_invoice(
            title=PRO_PRODUCT_TITLE,
            description=PRO_PRODUCT_DESC,
            payload="pro_30days",
            provider_token="",   
            currency=CURRENCY,  
            prices=prices
        )
    elif q.data == "BACK_HOME":
        await q.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

async def pre_checkout_q(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    grant_pro(user_id, days=30)
    await update.message.reply_text("üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ë–µ–∑–ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π. –ü–∏—à–∏ /ask –≤–æ–ø—Ä–æ—Å.")

def main():
    if not TOKEN or not OPENAI_API_KEY:
        raise SystemExit("–ù—É–∂–Ω—ã TOKEN –∏ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("ask", ask_cmd))
    app.add_handler(CommandHandler("limit", show_limit))
    app.add_handler(CommandHandler("buy", lambda u, c: paywall(u, c)))
    app.add_handler(CallbackQueryHandler(on_cb))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    app.add_handler(MessageHandler(filters.StatusUpdate.PRE_CHECKOUT_QUERY, pre_checkout_q))

    print("üöÄ Bot started (polling)‚Ä¶")
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()



